#!/usr/bin/env php
<?php

use Amp\ByteStream\ReadableResourceStream;
use Amp\ByteStream\WritableResourceStream;
use Amp\Http\Client\HttpClientBuilder;
use Amp\Http\Client\Interceptor\AddRequestHeader;
use Amp\WebsiteTools\GitHubClient;
use Kelunik\OAuth\Providers\GitHubProvider;
use function Kelunik\OAuthCli\authenticate;

require __DIR__ . "/../vendor/autoload.php";

$clientId = getenv("AMPHP_GITHUB_SYNC_APP_ID");
$clientSecret = getenv("AMPHP_GITHUB_SYNC_APP_SECRET");

$stdin = new ReadableResourceStream(STDIN);
$stdout = new WritableResourceStream(STDOUT);

$httpClient = (new HttpClientBuilder)
    ->intercept(new AddRequestHeader('user-agent', 'amphp/website-tools'))
    ->build();

$github = new GitHubProvider($httpClient, "http://127.0.0.1:1337/oauth", $clientId, $clientSecret, ["repo"]);
$oauthToken = authenticate($github);

$githubClient = new GitHubClient($oauthToken, $httpClient);

$reference = $githubClient->getHead("amphp/amphp.github.io", "master");

$stdout->write("amphp/amphp.github.io is at {$reference}\r\n");
$stdout->write("Do you want to update all repositories to that reference? [y/N]: ");
$answer = $stdin->read();

if (trim($answer) !== "y") {
    exit(0);
}

$repositories = $githubClient->getRepositories("amphp");

foreach ($repositories as $repository) {
    $repository = $repository["full_name"];

    $currentVersion = $githubClient->getSubmoduleVersion($repository, "docs/.shared");

    if ($currentVersion !== null && $currentVersion !== $reference) {
        $stdout->write("{$repository} is not up-to-date, should I update it? [Y/n]: ");

        $answer = trim($stdin->read());

        if ($answer !== "y" && $answer !== "") {
            exit(0);
        }

        $master = $githubClient->getHead($repository, "master");
        $baseTree = $githubClient->getCommitTree($repository, $master);
        $baseTree = $githubClient->getTree($repository, $baseTree);

        foreach ($baseTree["tree"] as $baseTreeKey => $baseTreeChild) {
            if ($baseTreeChild["path"] === "docs") {
                $docsTree = $githubClient->getTree($repository, $baseTreeChild["sha"]);

                foreach ($docsTree["tree"] as $docsTreeKey => $docsTreeChild) {
                    if ($docsTreeChild["path"] === ".shared") {
                        $docsTree["tree"][$docsTreeKey]["sha"] = $reference;
                    }
                }

                $docsTree = $githubClient->createTree($repository, $docsTree["sha"], $docsTree["tree"]);
                $baseTree["tree"][$baseTreeKey]["sha"] = $docsTree["sha"];
            }
        }

        $newTree = $githubClient->createTree($repository, $baseTree["sha"], $baseTree["tree"]);

        $commitMessage = <<<MESSAGE
Update shared documentation files

This is an automated commit. Please report any issues to https://github.com/amphp/website-tools.
MESSAGE;

        $commit = $githubClient->createCommit($repository, $commitMessage, $newTree["sha"], [$master]);
        $stdout->write("Created {$commit["sha"]} in {$repository}.\r\n");

        $ref = $githubClient->updateHead($repository, "master", $commit["sha"]);
        $stdout->write("Updated {$ref["ref"]} in {$repository} to {$commit["sha"]}.\r\n");
    }
}