#!/usr/bin/env php
<?php

use Amp\Http\Client\HttpClientBuilder;
use Amp\Http\Client\Interceptor\AddRequestHeader;
use Amp\WebsiteTools\GitHubClient;
use Kelunik\OAuth\Providers\GitHubProvider;
use function Amp\ByteStream\getStdin;
use function Amp\ByteStream\getStdout;
use function Kelunik\OAuthCli\authenticate;

require __DIR__ . "/../vendor/autoload.php";

$stdin = getStdin();
$stdout = getStdout();

$httpClient = (new HttpClientBuilder)
    ->intercept(new AddRequestHeader('user-agent', 'amphp/website-tools'))
    ->build();

$oauthToken = getenv('AMPHP_GITHUB_SYNC_TOKEN');
if (!$oauthToken) {
    $github = new GitHubProvider(
        $httpClient,
        "http://127.0.0.1:1337/oauth",
        getenv("AMPHP_GITHUB_SYNC_APP_ID"),
        getenv("AMPHP_GITHUB_SYNC_APP_SECRET"),
        ["repo"]
    );

    $oauthToken = authenticate($github);
    print 'Set AMPHP_GITHUB_SYNC_TOKEN=' . $oauthToken . ' to avoid manual interaction in the future.' . PHP_EOL;
}

$githubClient = new GitHubClient($oauthToken, $httpClient);

$reference = $githubClient->getHead("amphp/v3.amphp.org", "main");

$stdout->write("amphp/amphp.org is at {$reference}\r\n");

syncReadme(
    $githubClient,
    'amphp/amp@3.x',
    'Coroutines, Futures, and Cancellations in PHP',
    'Get started with asynchronous PHP by learning how to use the fundamental primitives.',
    'undraw/undraw_city_life.svg',
);

syncReadme(
    $githubClient,
    'amphp/byte-stream@2.x',
    'Non-blocking I/O Streams in PHP',
    'Learn how to stream data (ordered sequences of bytes) concurrently in PHP.',
    'undraw/undraw_developer_activity.svg',
);

syncReadme(
    $githubClient,
    'amphp/sync@2.x',
    'Synchronize Concurrent Execution in PHP',
    'Learn how to use synchronization primitives to organize concurrency.',
    'undraw/undraw_developer_activity.svg',
);

syncReadme(
    $githubClient,
    'amphp/redis@2.x',
    'Communicate with Redis Servers',
    'Learn how to efficiently communicate with Redis servers, enabling scalable and responsive data storage and retrieval.',
    'undraw/undraw_searching.svg',
);

syncReadme(
    $githubClient,
    'amphp/cache@2.x',
    'Cache Data in Concurrent PHP Applications',
    'Learn how to cache data to serve requests faster in a concurrency safe way.',
    'undraw/undraw_memory_storage.svg',
);

syncReadme(
    $githubClient,
    'amphp/dns@2.x',
    'Non-blocking DNS Hostname Resolution and Queries in PHP',
    'Learn how to resolve hostnames to IP addresses and query records the domain name system.',
    'undraw/undraw_searching.svg',
);

syncReadme(
    $githubClient,
    'amphp/file@3.x',
    'Non-blocking Filesystem Access in PHP',
    'Learn how to read and write files without blocking the event loop.',
    'undraw/undraw_my_files.svg',
);

syncReadme(
    $githubClient,
    'amphp/socket@2.x',
    'Non-blocking TCP Servers and Clients in PHP',
    'Learn how to connect to servers and serve connections yourself.',
    'undraw/undraw_coffee.svg',
);

syncReadme(
    $githubClient,
    'amphp/windows-registry@1.x',
    'Non-blocking Windows Registry Access in PHP',
    'Learn how to read values from the Windows Registry.',
    'undraw/undraw_welcome.svg',
);

syncReadme(
    $githubClient,
    'amphp/log@2.x',
    'Non-blocking Logging in PHP',
    'Learn how to write logs for your application in a non-blocking way.',
    'undraw/undraw_diary.svg',
);

syncReadme(
    $githubClient,
    'amphp/parser@1.x',
    'Writing Parsers in PHP',
    'Learn how to write streaming generator parsers in PHP.',
    'undraw/undraw_reading_time.svg',
);

syncReadme(
    $githubClient,
    'amphp/phpunit-util@3.x',
    'Simplify PHPUnit Tests Involving Asynchronous Behavior',
    'Learn how to write tests with PHPUnit while making use of timeouts and minimum runtimes.',
    'undraw/undraw_qa_engineers.svg',
);

syncReadme(
    $githubClient,
    'amphp/mysql@3.x',
    'MySQL Connection Pool in PHP',
    'Learn how to query and update data in MySQL databases.',
    'undraw/undraw_fishing.svg',
);

syncReadme(
    $githubClient,
    'amphp/process@2.x',
    'Non-blocking Child Processes in PHP',
    'Learn how to run child processes, stream data, and collect their exit codes.',
    'undraw/undraw_fatherhood.svg',
);

syncReadme(
    $githubClient,
    'amphp/serialization@1.x',
    'Serialization in PHP',
    'Learn how to serialize data for IPC and data storage in PHP.',
    'undraw/undraw_drone_delivery.svg',
);

syncReadme(
    $githubClient,
    'amphp/parallel@2.x',
    'Parallel Processing in PHP',
    'Learn how to do true parallel processing in PHP using multiple processes or native threads, without blocking and no extensions required.',
    'undraw/undraw_upgrade.svg',
);

syncReadme(
    $githubClient,
    'amphp/http@2.x',
    'Learn how to use common HTTP components shared between servers and clients.',
    'undraw/undraw_growing.svg',
);

syncReadme(
    $githubClient,
    'amphp/http-server@3.x',
    'Learn how to create an HTTP server.',
    'undraw/undraw_server_cluster.svg',
);

syncReadme(
    $githubClient,
    'amphp/http-server-router@2.x',
    'Learn how to create an HTTP server request handler based on path router.',
    'undraw/undraw_server_cluster.svg',
);

syncReadme(
    $githubClient,
    'amphp/http-server-static-content@2.x',
    'Learn how to create an HTTP server request handler to serve static content.',
    'undraw/undraw_server_cluster.svg',
);

syncReadme(
    $githubClient,
    'amphp/http-server-form-parser@2.x',
    'Learn how to parse x-www-form-urlencoded or multipart/form-data data submitted to an HTTP server request handler.',
    'undraw/undraw_server_cluster.svg',
);

syncReadme(
    $githubClient,
    'amphp/http-server-session@3.x',
    'Learn how to create and store session data in the HTTP server.',
    'undraw/undraw_server_cluster.svg',
);

syncReadme(
    $githubClient,
    'amphp/http@2.x',
    'HTTP in PHP',
    'Learn how to use our standards-compliant collection of basic HTTP primitives which can be shared by servers and clients.',
    'undraw/undraw_logistics.svg',
);

syncReadme(
    $githubClient,
    'amphp/http-client@5.x',
    'Non-blocking HTTP Client in PHP',
    'Learn how to do standards-compliant HTTP resource traversal and RESTful web service consumption.',
    'undraw/undraw_logistics.svg',
);

syncReadme(
    $githubClient,
    'amphp/http-server@3.x',
    'HTTP server applications in PHP based on Revolt',
    'Learn how to build non-blocking, concurrent HTTP/1.1 and HTTP/2 server applications in PHP based on Revolt.',
    'undraw/undraw_logistics.svg',
);

syncReadme(
    $githubClient,
    'amphp/http-server-router@2.x',
    'Routing for HTTP servers in PHP',
    'Learn how to route to different HTTP server RequestHandler instances based on the request path and method using FastRoute.',
    'undraw/undraw_logistics.svg',
);

syncReadme(
    $githubClient,
    'amphp/http-server-session@3.x',
    'Session Handling for HTTP servers in PHP',
    'Learn how to handle user sessions, securely managing data across requests.',
    'undraw/undraw_logistics.svg',
);

syncReadme(
    $githubClient,
    'amphp/http-server-static-content@2.x',
    'Static File Serving',
    'Learn how to serve static files with Amp\'s HTTP server.',
    'undraw/undraw_logistics.svg',
);

syncReadme(
    $githubClient,
    'amphp/pipeline@1.x',
    'Concurrent Datasets in PHP',
    'Learn how to create and consume asynchronous sets.',
    'undraw/undraw_logistics.svg',
);

syncReadme(
    $githubClient,
    'amphp/react-adapter@master',
    'ReactPHP Compatibility',
    'Learn how to use any ReactPHP library and make it compatible with Amp.',
    'undraw/undraw_logistics.svg',
);

syncReadme(
    $githubClient,
    'amphp/websocket-client@2.x',
    'Learn how to create WebSocket client connections.',
    'undraw/undraw_coffee.svg',
);

syncReadme(
    $githubClient,
    'amphp/websocket-server@4.x',
    'Learn how to create WebSocket servers.',
    'undraw/undraw_drone_delivery.svg',
);

syncReadme(
    $githubClient,
    'amphp/cluster@2.x',
    'Learn how to create multiprocess server clusters.',
    'undraw/undraw_server_cluster.svg',
);

syncReleases($githubClient);
